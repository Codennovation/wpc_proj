# Generated by Django 2.0.3 on 2018-07-29 16:14

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
        ('wagtailimages', '0019_delete_filter'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('body', models.TextField(help_text='Few words to display on main image.', max_length=450, verbose_name='Brief Image Body')),
                ('additional_info', wagtail.core.fields.RichTextField(blank=True, help_text='Additional Info about the page.')),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('slider_h1', models.CharField(help_text='Text to displayed on first image.', max_length=100, verbose_name='First Slider Text')),
                ('slider_h2', models.CharField(help_text='Text to displayed on second image.', max_length=100, verbose_name='Second Slider Text')),
                ('slider_h3', models.CharField(help_text='Text to displayed on third image.', max_length=100, verbose_name='Third Slider Text')),
                ('brief_heading', models.CharField(help_text='One liner for WPC. Max 40 characters.', max_length=40, verbose_name='Brief Title')),
                ('brief_body', models.TextField(help_text='WPC in short. First words that a user will read about WPC.', max_length=450, verbose_name='Brief Body')),
                ('vision_heading', models.CharField(max_length=30)),
                ('vision_body', models.TextField(max_length=150)),
                ('agenda_h1', models.CharField(max_length=50)),
                ('agenda_body1', models.TextField(max_length=255)),
                ('agenda_h2', models.CharField(max_length=50)),
                ('agenda_body2', models.TextField(max_length=255)),
                ('agenda_h3', models.CharField(max_length=50)),
                ('agenda_body3', models.TextField(max_length=255)),
                ('agenda_h4', models.CharField(max_length=50)),
                ('agenda_body4', models.TextField(max_length=255)),
                ('home_video_title', models.CharField(blank=True, max_length=30, null=True)),
                ('home_video_subtitle', models.CharField(blank=True, max_length=60, null=True)),
                ('home_video_url', models.URLField(blank=True, help_text='Paste the video embed url from youtube.', null=True, verbose_name='Video URL')),
                ('featured_works_title', models.CharField(blank=True, help_text='Title to displayed for works section.', max_length=40, null=True)),
                ('twitter_block', wagtail.core.fields.StreamField((('twitter', wagtail.core.blocks.StructBlock((('twitter_box_username', wagtail.core.blocks.CharBlock(help_text='Username or the Screenname of the twitter handle.', required=True, verbose_name='Username')), ('twitter_box_tweet_limit', wagtail.core.blocks.IntegerBlock(default=2, help_text='Max number of tweets to be displayed on the homepage. Default will be 2.', max_length=2, required=True, verbose_name='Tweets limit'))))),), blank=True, help_text='Link the social accounts here.', null=True, verbose_name='Social Board')),
                ('featured_blog_title', models.CharField(blank=True, help_text='Title to displayed for blog section.', max_length=40, null=True)),
                ('featured_blog_tagline', models.CharField(blank=True, help_text='A tagline for blogs.', max_length=200, null=True, verbose_name='Blog Tagline')),
                ('quote_for_the_day', models.CharField(blank=True, max_length=150, null=True)),
                ('featured_blog', models.ForeignKey(blank=True, help_text='Will display 3 featured blogs.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page', verbose_name='Blogs Page Link')),
                ('featured_works', models.ForeignKey(blank=True, help_text='Will display 3 featured works.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page', verbose_name='Works Page Link')),
                ('home_video_image', models.ForeignKey(blank=True, help_text='Screenshot image of the video', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailimages.Image', verbose_name='Video screenshot/image.')),
                ('quote_image', models.ForeignKey(blank=True, help_text='Image for the quote.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailimages.Image', verbose_name='Quote Image')),
                ('slider_image1', models.ForeignKey(help_text='First image for the slider.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailimages.Image', verbose_name='First Image')),
                ('slider_image2', models.ForeignKey(help_text='Second image for the slider.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailimages.Image', verbose_name='Second Image')),
                ('slider_image3', models.ForeignKey(help_text='Third image for the slider.', on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailimages.Image', verbose_name='Third Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='formfield',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='home.FormPage'),
        ),
    ]
